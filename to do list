import 'dart:async';

import 'package:flutter/material.dart';

void main() {
  runApp(ToDoApp());
}

class ToDoApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'To-Do List',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        appBarTheme: AppBarTheme(
          backgroundColor: Color(0xFF006064), // Cyan 800
        ),
      ),
      home: SplashScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class SplashScreen extends StatefulWidget {
  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    Timer(
      Duration(seconds: 3), // Change the duration as needed
      () {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => ToDoList()),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color(0xFF006064), // Cyan 800
              Color(0xFF0097A7), // Cyan 700
              Color(0xFF00ACC1), // Cyan 600
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'To-Do List App',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class ToDoList extends StatefulWidget {
  @override
  _ToDoListState createState() => _ToDoListState();
}

class _ToDoListState extends State<ToDoList> {
  final List<String> _toDoList = <String>[];
  final List<String> _doneList = <String>[];
  final TextEditingController _textFieldController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('To-Do List'),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color(0xFF006064), // Cyan 800
              Color(0xFF0097A7), // Cyan 700
              Color(0xFF00ACC1), // Cyan 600
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: ListView.builder(
          itemCount: _toDoList.length + _doneList.length + 1,
          itemBuilder: (BuildContext context, int index) {
            if (index < _toDoList.length) {
              return _buildToDoItem(index);
            } else if (index == _toDoList.length) {
              return _buildDoneHeading();
            } else {
              return _buildDoneItem(index - _toDoList.length - 1);
            }
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => AddTaskPage()),
          ).then((value) {
            if (value != null && value is String) {
              setState(() {
                _toDoList.add(value);
              });
            }
          });
        },
        child: Icon(Icons.add),
        backgroundColor: Color(0xFF006064), // Cyan 800
      ),
    );
  }

  Widget _buildToDoItem(int index) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
        ),
        child: ListTile(
          title: Text(
            _toDoList[index],
            style: TextStyle(color: Colors.black),
          ),
          trailing: Checkbox(
            onChanged: (bool? value) {
              if (value != null && value) {
                _moveToDone(index);
              }
            },
            value: false, // Set this value based on task completion status
          ),
        ),
      ),
    );
  }

  Widget _buildDoneHeading() {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Text(
        'DONE',
        style: TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.bold,
          fontSize: 18,
        ),
      ),
    );
  }

  Widget _buildDoneItem(int index) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
        ),
        child: ListTile(
          title: Text(
            _doneList[index],
            style: TextStyle(
              color: Colors.black,
              decoration: TextDecoration.lineThrough,
            ),
          ),
        ),
      ),
    );
  }

  void _moveToDone(int index) {
    setState(() {
      String doneTask = _toDoList.removeAt(index);
      _doneList.add(doneTask);
    });
  }
}

class AddTaskPage extends StatefulWidget {
  @override
  _AddTaskPageState createState() => _AddTaskPageState();
}

class _AddTaskPageState extends State<AddTaskPage> {
  final TextEditingController _textFieldController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Task'),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color(0xFF006064), // Cyan 800
              Color(0xFF0097A7), // Cyan 700
              Color(0xFF00ACC1), // Cyan 600
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Add a Task',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              SizedBox(height: 20),
              TextField(
                controller: _textFieldController,
                decoration: InputDecoration(
                  hintText: 'Enter task here',
                  fillColor: Colors.white,
                  filled: true,
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_textFieldController.text.isNotEmpty) {
                    Navigator.pop(context, _textFieldController.text);
                  }
                },
                style: ElevatedButton.styleFrom(
                  primary: Colors.white,
                ),
                child: Text(
                  'ADD',
                  style: TextStyle(color: Color(0xFF006064)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
